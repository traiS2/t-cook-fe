// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userID            String  @map("user_id")
  type              String
  provider          String
  providerAccountID String  @map("provider_account_id")
  refreshToken      String? @map("refesher_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text

  user User @relation(fields: [userID], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountID])
  @@map("account")
}

model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  image    String?
  role     Role      @default(user)
  accounts Account[]
  Blog     Blog[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

enum Role {
  user
  admin
}

enum Status {
  active
  inactive
  suspended
  pending
  banned
  closed
}

model Blog {
  id               Int            @id @default(autoincrement())
  link             String         @unique
  title            String         @db.Text
  image            String
  levelOfDifficult Int            @map("level_of_difficult")
  cookingTime      Int            @map("cooking_time")
  servingSize      String         @map("serving_size")
  createAt         DateTime       @map("create_at")
  updateAt         DateTime?      @map("update_at")
  userID           String         @map("user_id")
  user             User           @relation(fields: [userID], references: [id])
  status           Status         @default(pending)
  introduction     Introduction[]
  ingredient       Ingredient[]
  recipe           Recipe[]
  tag              BlogTag[]
  category         BlogCategory[]

  @@map("blog")
}

model Ingredient {
  id     Int
  name   String @db.Text
  blogID Int    @map("blog_id")
  blog   Blog   @relation(fields: [blogID], references: [id])

  @@id([id, blogID])
  @@map("ingredient")
}

model Recipe {
  id           Int
  title        String
  blogID       Int            @map("blog_id")
  blog         Blog           @relation(fields: [blogID], references: [id])
  imageRecipe  ImageRecipe?
  detailRecipe DetailRecipe[]

  @@id([id, blogID])
  @@map("recipe")
}

model ImageRecipe {
  id       String @default(cuid())
  url      String @db.Text
  recipeID Int    @map("recipe_id")
  blogID   Int    @map("blog_id")
  recipe   Recipe @relation(fields: [recipeID, blogID], references: [id, blogID])

  @@id([id, recipeID, blogID])
  @@unique([recipeID, blogID])
  @@map("image_recipe")
}

model DetailRecipe {
  id       Int
  content  String @db.Text
  recipeID Int    @map("recipe_id")
  blogID   Int
  reicpe   Recipe @relation(fields: [recipeID, blogID], references: [id, blogID])

  @@id([id, recipeID, blogID])
  @@map("detail_recipe")
}

model Tag {
  id   Int       @id @default(autoincrement())
  name String
  blog BlogTag[]

  @@unique([id])
  @@map("tag")
}

model BlogTag {
  tagID  Int  @map("tag_id")
  blogID Int  @map("blog_id")
  tag    Tag  @relation(fields: [tagID], references: [id])
  blog   Blog @relation(fields: [blogID], references: [id])

  @@id([tagID, blogID])
  @@map("blog_tag")
}

model Introduction {
  id      Int
  content String @db.Text
  blogID  Int    @map("blog_id")
  blog    Blog   @relation(fields: [blogID], references: [id])

  @@id([id, blogID])
  @@map("introduction")
}

model Category {
  id       Int            @id @default(autoincrement())
  name     String
  category BlogCategory[]

  @@map("category")
}

model BlogCategory {
  categoryID Int      @map("category_id")
  blogID     Int      @map("blog_id")
  category   Category @relation(fields: [categoryID], references: [id])
  blog       Blog     @relation(fields: [blogID], references: [id])

  @@id([categoryID, blogID])
  @@map("blog_category")
}

model PrimaryCategory {
  id       Int    @id
  name     String
  statusID Int    @map("status_id")
  status   Status @default(pending)

  @@map("primary_category")
}
